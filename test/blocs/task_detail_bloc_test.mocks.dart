// Mocks generated by Mockito 5.4.4 from annotations
// in tick_task/test/blocs/task_detail_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tick_task/src/core/bloc/loader_bloc.dart' as _i3;
import 'package:tick_task/src/core/rest_api/rest_api.dart' as _i7;
import 'package:tick_task/src/core/rest_api/rest_api_response_data.dart' as _i2;
import 'package:tick_task/src/data/model/comments_response.dart' as _i9;
import 'package:tick_task/src/data/model/task_response.dart' as _i6;
import 'package:tick_task/src/data/repository/comments_repository.dart' as _i8;
import 'package:tick_task/src/data/repository/task_repository.dart' as _i4;
import 'package:tick_task/src/services/completed_tasks_storage.dart' as _i11;
import 'package:tick_task/src/services/timer_service.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResponseWrapper_0<T> extends _i1.SmartFake
    implements _i2.ApiResponseWrapper<T> {
  _FakeApiResponseWrapper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoaderState_2 extends _i1.SmartFake implements _i3.LoaderState {
  _FakeLoaderState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i4.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<
      _i2.ApiResponseWrapper<List<_i6.TodoistTaskResponseData>>> getTasks(
          _i7.RestApi? restApi) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [restApi],
        ),
        returnValue: _i5.Future<
                _i2
                .ApiResponseWrapper<List<_i6.TodoistTaskResponseData>>>.value(
            _FakeApiResponseWrapper_0<List<_i6.TodoistTaskResponseData>>(
          this,
          Invocation.method(
            #getTasks,
            [restApi],
          ),
        )),
      ) as _i5
          .Future<_i2.ApiResponseWrapper<List<_i6.TodoistTaskResponseData>>>);

  @override
  _i5.Future<_i2.ApiResponseWrapper<_i6.TodoistTaskResponseData>> getTaskById(
    _i7.RestApi? restApi,
    String? taskId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [
            restApi,
            taskId,
          ],
        ),
        returnValue: _i5
            .Future<_i2.ApiResponseWrapper<_i6.TodoistTaskResponseData>>.value(
            _FakeApiResponseWrapper_0<_i6.TodoistTaskResponseData>(
          this,
          Invocation.method(
            #getTaskById,
            [
              restApi,
              taskId,
            ],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponseWrapper<_i6.TodoistTaskResponseData>>);

  @override
  _i5.Future<_i2.ApiResponseWrapper<_i6.TodoistTaskResponseData>> addTasks(
    _i7.RestApi? restApi,
    Map<String, dynamic>? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTasks,
          [
            restApi,
            body,
          ],
        ),
        returnValue: _i5
            .Future<_i2.ApiResponseWrapper<_i6.TodoistTaskResponseData>>.value(
            _FakeApiResponseWrapper_0<_i6.TodoistTaskResponseData>(
          this,
          Invocation.method(
            #addTasks,
            [
              restApi,
              body,
            ],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponseWrapper<_i6.TodoistTaskResponseData>>);

  @override
  _i5.Future<_i2.ApiResponseWrapper<_i6.TodoistTaskResponseData>> updateTasks(
    _i7.RestApi? restApi,
    Map<String, dynamic>? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTasks,
          [
            restApi,
            body,
          ],
        ),
        returnValue: _i5
            .Future<_i2.ApiResponseWrapper<_i6.TodoistTaskResponseData>>.value(
            _FakeApiResponseWrapper_0<_i6.TodoistTaskResponseData>(
          this,
          Invocation.method(
            #updateTasks,
            [
              restApi,
              body,
            ],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponseWrapper<_i6.TodoistTaskResponseData>>);

  @override
  _i5.Future<_i2.ApiResponseWrapper<dynamic>> deleteTasks(
    _i7.RestApi? restApi,
    String? taskId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTasks,
          [
            restApi,
            taskId,
          ],
        ),
        returnValue: _i5.Future<_i2.ApiResponseWrapper<dynamic>>.value(
            _FakeApiResponseWrapper_0<dynamic>(
          this,
          Invocation.method(
            #deleteTasks,
            [
              restApi,
              taskId,
            ],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponseWrapper<dynamic>>);
}

/// A class which mocks [CommentsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentsRepository extends _i1.Mock
    implements _i8.CommentsRepository {
  MockCommentsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ApiResponseWrapper<List<_i9.CommentsResponse>>> getComments(
    _i7.RestApi? restApi,
    String? taskId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComments,
          [
            restApi,
            taskId,
          ],
        ),
        returnValue: _i5
            .Future<_i2.ApiResponseWrapper<List<_i9.CommentsResponse>>>.value(
            _FakeApiResponseWrapper_0<List<_i9.CommentsResponse>>(
          this,
          Invocation.method(
            #getComments,
            [
              restApi,
              taskId,
            ],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponseWrapper<List<_i9.CommentsResponse>>>);

  @override
  _i5.Future<_i2.ApiResponseWrapper<_i9.CommentsResponse>> addComments(
    _i7.RestApi? restApi,
    Map<String, dynamic>? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addComments,
          [
            restApi,
            body,
          ],
        ),
        returnValue:
            _i5.Future<_i2.ApiResponseWrapper<_i9.CommentsResponse>>.value(
                _FakeApiResponseWrapper_0<_i9.CommentsResponse>(
          this,
          Invocation.method(
            #addComments,
            [
              restApi,
              body,
            ],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponseWrapper<_i9.CommentsResponse>>);

  @override
  _i5.Future<_i2.ApiResponseWrapper<_i9.CommentsResponse>> updateComments(
    _i7.RestApi? restApi,
    Map<String, dynamic>? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateComments,
          [
            restApi,
            body,
          ],
        ),
        returnValue:
            _i5.Future<_i2.ApiResponseWrapper<_i9.CommentsResponse>>.value(
                _FakeApiResponseWrapper_0<_i9.CommentsResponse>(
          this,
          Invocation.method(
            #updateComments,
            [
              restApi,
              body,
            ],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponseWrapper<_i9.CommentsResponse>>);

  @override
  _i5.Future<_i2.ApiResponseWrapper<dynamic>> deleteComments(
    _i7.RestApi? restApi,
    String? commentsId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteComments,
          [
            restApi,
            commentsId,
          ],
        ),
        returnValue: _i5.Future<_i2.ApiResponseWrapper<dynamic>>.value(
            _FakeApiResponseWrapper_0<dynamic>(
          this,
          Invocation.method(
            #deleteComments,
            [
              restApi,
              commentsId,
            ],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponseWrapper<dynamic>>);
}

/// A class which mocks [TimerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerService extends _i1.Mock implements _i10.TimerService {
  MockTimerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i10.TimerUpdate> get timerUpdates => (super.noSuchMethod(
        Invocation.getter(#timerUpdates),
        returnValue: _i5.Stream<_i10.TimerUpdate>.empty(),
      ) as _i5.Stream<_i10.TimerUpdate>);

  @override
  void startTimer(String? taskId) => super.noSuchMethod(
        Invocation.method(
          #startTimer,
          [taskId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopTimer(String? taskId) => super.noSuchMethod(
        Invocation.method(
          #stopTimer,
          [taskId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isTimerRunning(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #isTimerRunning,
          [taskId],
        ),
        returnValue: false,
      ) as bool);

  @override
  Duration getTimeSpent(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #getTimeSpent,
          [taskId],
        ),
        returnValue: _FakeDuration_1(
          this,
          Invocation.method(
            #getTimeSpent,
            [taskId],
          ),
        ),
      ) as Duration);

  @override
  _i5.Future<void> initializeTimers() => (super.noSuchMethod(
        Invocation.method(
          #initializeTimers,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void updateTimer(
    String? taskId,
    Duration? timeSpent,
    bool? isRunning,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateTimer,
          [
            taskId,
            timeSpent,
            isRunning,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearTimer(String? taskId) => super.noSuchMethod(
        Invocation.method(
          #clearTimer,
          [taskId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> saveTimeSpent(
    String? taskId,
    Duration? timeSpent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTimeSpent,
          [
            taskId,
            timeSpent,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool isRunning(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #isRunning,
          [taskId],
        ),
        returnValue: false,
      ) as bool);

  @override
  Duration getElapsedTime(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #getElapsedTime,
          [taskId],
        ),
        returnValue: _FakeDuration_1(
          this,
          Invocation.method(
            #getElapsedTime,
            [taskId],
          ),
        ),
      ) as Duration);

  @override
  void restoreTimer(
    String? taskId,
    Duration? elapsedTime,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #restoreTimer,
          [
            taskId,
            elapsedTime,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CompletedTasksStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompletedTasksStorage extends _i1.Mock
    implements _i11.CompletedTasksStorage {
  MockCompletedTasksStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveCompletedTask(_i6.TodoistTaskResponseData? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCompletedTask,
          [task],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.TodoistTaskResponseData>> getCompletedTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i6.TodoistTaskResponseData>>.value(
            <_i6.TodoistTaskResponseData>[]),
      ) as _i5.Future<List<_i6.TodoistTaskResponseData>>);

  @override
  _i5.Future<void> clearCompletedTasks() => (super.noSuchMethod(
        Invocation.method(
          #clearCompletedTasks,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> isTaskCompleted(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #isTaskCompleted,
          [taskId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> saveTaskCompletionTime(
    String? taskId,
    Duration? duration,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTaskCompletionTime,
          [
            taskId,
            duration,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Duration?> getTaskCompletionTime(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskCompletionTime,
          [taskId],
        ),
        returnValue: _i5.Future<Duration?>.value(),
      ) as _i5.Future<Duration?>);
}

/// A class which mocks [LoaderBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoaderBloc extends _i1.Mock implements _i3.LoaderBloc {
  MockLoaderBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.LoaderState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLoaderState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.LoaderState);

  @override
  _i5.Stream<_i3.LoaderState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.LoaderState>.empty(),
      ) as _i5.Stream<_i3.LoaderState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i3.LoaderEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.LoaderEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.LoaderState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.LoaderEvent>(
    _i12.EventHandler<E, _i3.LoaderState>? handler, {
    _i12.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i12.Transition<_i3.LoaderEvent, _i3.LoaderState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i12.Change<_i3.LoaderState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
